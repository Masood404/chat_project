@import "~bootstrap/scss/functions";

$primary: #127dff;

@import "~bootstrap/scss/variables";
@import "~bootstrap/scss/variables-dark";

$custom-colors: (
  "violet": #a033ff,
  "pink": #ff5c87,
  "lavender-mist": #fafaff,
);
$theme-colors: map-merge($theme-colors, $custom-colors);

$custom-font-sizes: (
  0: 85px,
  c1: 70px,
);

$font-sizes: map-merge($font-sizes, $custom-font-sizes);

$custom-spacers: ();

@for $i from 6 through 20 {
  $custom-spacers: map-merge($custom-spacers, ($i: $spacer * ($i - 2)));
}

$spacers: map-merge($spacers, $custom-spacers);

$light-bg-subtle: mix($gray-200, $white);

$input-placeholder-color: var(secondary-text-emphasis);

@import "~bootstrap/scss/maps";
@import "~bootstrap/scss/mixins";
@import "~bootstrap/scss/utilities";

$percent-size-map: ();
$percent-size-map-i: 90;

@while $percent-size-map-i < 150 {
  $percent-size-map: map-merge($percent-size-map, ($percent-size-map-i: $percent-size-map-i * 1%));
  $percent-size-map-i: $percent-size-map-i + 10;
}

$pixel-size-map: ();

@for $i from 1 through 100 {
  $pixel-size-map: map-merge($pixel-size-map, (p-#{$i}: $i * 5px));
}

$utilities: map-merge(
  $utilities,
  (
    "width":
      map-merge(
        map-get($utilities, "width"),
        (
          values:
            map-merge(
              map-get(map-get($utilities, "width"), "values"),
              map-merge($pixel-size-map, $percent-size-map)
            ),
        )
      ),
    "height": 
      map-merge(
        map-get($utilities, "height"),
        (
          values: 
            map-merge(
              map-get(map-get($utilities, "height"), "values"),
              map-merge($pixel-size-map, $percent-size-map)
            ),
        )
      )
  )
);

@import "~bootstrap/scss/bootstrap";
@import "~bootstrap-icons/font/bootstrap-icons";

@mixin checked-bg($color-name, $color-value) {
  .checked-bg-#{$color-name} {
    &:checked {
      background-color: $color-value !important;
    }
  }
}

@each $color, $value in $theme-colors {
  @include checked-bg($color, $value);
}

@for $i from 1 through 10 {
  .ls-#{$i} {
    letter-spacing: $i * 5 - 15px;
  }
}

@each $breakpoint, $breakpoint-value in $grid-breakpoints {
  @media (min-width: #{$breakpoint-value}) {
    @each $width, $value in map-get(map-get($utilities, "width"), "values") {
      .w-#{$breakpoint}-#{$width} {
        width: #{$value};
      }
    }
  }
}

a {
  color: var(--bs-theme-dark);
  text-decoration: none;

  &:hover {
    text-decoration: underline;
  }
  &[role="button"]:hover {
    text-decoration: none;
  }
}

input.form-control {
  width: 286px;
}

.App {
  font-family: Helvetica Neue, Segoe UI, Helvetica, Arial, sans-serif;
  overflow-x: clip;
}

.navbar-light {
  background-color: var(--bs-body-bg);
}

.nav-link {
  & {
    position: relative;
    color: var(--bs-text-dark);
    font-weight: 600;
  }

  &::after {
    content: "";
    background-color: var(--bs-primary);
    border-radius: 1.5px;
    bottom: 4px;
    height: 3px;
    left: 0;
    position: absolute;

    width: 0%;
    visibility: hidden;

    transition-duration: 0.2s;
    transition-timing-function: ease;
    transition-property: width, visibility;
  }

  &:hover {
    & {
      text-decoration: none;
    }

    &::after {
      width: 100%;
      visibility: visible;
    }
  }
}

.navbar-brand {
  img {
    width: 40px;
    height: 40px;
  }
}

.fs-0 {
  padding-bottom: 16px;
}

.theme-gradient-horizontal {
  color: transparent;
  background-clip: text;
  background-image: linear-gradient(
    90deg,
    var(--bs-primary) -5%,
    var(--bs-violet) 20%,
    var(--bs-pink) 60%
  );
}
